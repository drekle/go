// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	UrlRequest
	ListRequest
	StartResponse
	StopResponse
	ListResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type UrlRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *UrlRequest) Reset()                    { *m = UrlRequest{} }
func (m *UrlRequest) String() string            { return proto.CompactTextString(m) }
func (*UrlRequest) ProtoMessage()               {}
func (*UrlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UrlRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*UrlRequest)(nil), "api.UrlRequest")
	proto.RegisterType((*ListRequest)(nil), "api.ListRequest")
	proto.RegisterType((*StartResponse)(nil), "api.StartResponse")
	proto.RegisterType((*StopResponse)(nil), "api.StopResponse")
	proto.RegisterType((*ListResponse)(nil), "api.ListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scanner service

type ScannerClient interface {
	Start(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*StopResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type scannerClient struct {
	cc *grpc.ClientConn
}

func NewScannerClient(cc *grpc.ClientConn) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) Start(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/api.Scanner/start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) Stop(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/api.Scanner/stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/api.Scanner/list", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scanner service

type ScannerServer interface {
	Start(context.Context, *UrlRequest) (*StartResponse, error)
	Stop(context.Context, *UrlRequest) (*StopResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
}

func RegisterScannerServer(s *grpc.Server, srv ScannerServer) {
	s.RegisterService(&_Scanner_serviceDesc, srv)
}

func _Scanner_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Scanner/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Start(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Scanner/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Stop(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Scanner/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start",
			Handler:    _Scanner_Start_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Scanner_Stop_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Scanner_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x6e, 0xc2, 0x30,
	0x14, 0x44, 0x13, 0x25, 0x6d, 0xd5, 0xdf, 0xa4, 0x69, 0xff, 0xaa, 0xea, 0x02, 0x21, 0xaf, 0x58,
	0x80, 0x17, 0x70, 0x0d, 0x56, 0x89, 0x38, 0x80, 0x01, 0x0b, 0x59, 0x0a, 0xb1, 0xf1, 0xff, 0xb9,
	0x0a, 0xe7, 0x45, 0x71, 0x2c, 0x08, 0x62, 0x37, 0x63, 0x3f, 0x8d, 0x67, 0x0c, 0xe5, 0x59, 0x13,
	0xa9, 0x93, 0x96, 0xce, 0x5b, 0xb6, 0x98, 0x29, 0x67, 0xc4, 0x0c, 0x60, 0xe7, 0xdb, 0x5a, 0x5f,
	0x7a, 0x4d, 0x8c, 0x3f, 0x90, 0xf5, 0xbe, 0xfd, 0x4b, 0xe7, 0xe9, 0xe2, 0xb3, 0x1e, 0xa4, 0x28,
	0xe1, 0x6b, 0x6b, 0x88, 0x23, 0x20, 0x2a, 0x28, 0x1b, 0x56, 0x9e, 0x6b, 0x4d, 0xce, 0x76, 0xa4,
	0xc5, 0x37, 0x14, 0x0d, 0x5b, 0x77, 0xf7, 0x02, 0x8a, 0x91, 0x1f, 0x3d, 0x22, 0xe4, 0x47, 0xc5,
	0x2a, 0x46, 0x06, 0xbd, 0xbe, 0xa6, 0xf0, 0xd1, 0x1c, 0x54, 0xd7, 0x69, 0x8f, 0x12, 0xde, 0x68,
	0x08, 0xc4, 0x4a, 0x2a, 0x67, 0xe4, 0xa3, 0xcb, 0x3f, 0x86, 0x83, 0xe7, 0xd7, 0x12, 0x5c, 0x42,
	0x4e, 0x6c, 0xdd, 0x2b, 0xfe, 0x1b, 0xf1, 0x49, 0x97, 0x04, 0x57, 0x90, 0xb7, 0x66, 0xd8, 0x15,
	0x2e, 0x27, 0x43, 0x22, 0x3e, 0xad, 0x2a, 0x92, 0xfd, 0x7b, 0xf8, 0x98, 0xcd, 0x2d, 0x00, 0x00,
	0xff, 0xff, 0x03, 0x85, 0x78, 0xcd, 0x29, 0x01, 0x00, 0x00,
}
